#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
int main()
{
    sf::RenderWindow window(sf::VideoMode(600, 800), "Flappy Bird");
    sf::Clock clock;

    // Charger les textures
    sf::Texture backgroundTexture;
    backgroundTexture.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/background.png");
   /* sf::Texture birdTexture, birdTexture2;
    birdTexture.loadFromFile("X:/tout le reste/Images, videos et musiques/bird flap high.png") || birdTexture2.loadFromFile("X:/tout le reste/Images, videos et musiques/bird flap low.png");*/
    sf::Texture birdTexture, birdTexture2;
    if (!birdTexture.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/bird flap high.png") || !birdTexture2.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/bird flap low.png"))
    {
        return 1; // Erreur de chargement de l'image
    }
    sf::Texture pipeTexture;
    pipeTexture.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/sgsgvssdrg.PNG");
    sf::Texture pipeTexture2;
    pipeTexture2.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/sgsgvssdrg - Copie.png");

    // Créer les sprites
    sf::Sprite backgroundSprite(backgroundTexture);
    sf::Sprite birdSprite(birdTexture);
    sf::Sprite birdSprite2(birdTexture2);
    sf::Sprite pipeUpSprite(pipeTexture2);
    sf::Sprite pipeDownSprite(pipeTexture);

    // Positionner les sprites
    backgroundSprite.setPosition(0, 0);
    birdSprite.setPosition(50, 400);
    pipeUpSprite.setPosition(600, -500);
    pipeDownSprite.setPosition(600, 600);

    pipeUpSprite.setScale(0.59, 1);
    pipeDownSprite.setScale(0.59, 1);
    birdSprite.setScale(.04, .04);


    //--------------------------------Les nuages----------------------------------------------

    // Charger l'image
    sf::Texture clouds;
    if (!clouds.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/rain-clouds-png-27.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss(clouds);

    // Charger l'image
    sf::Texture clouds2;
    if (!clouds2.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/30-white-clouds-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss2(clouds2);

    // Charger l'image
    sf::Texture clouds3;
    if (!clouds3.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/19-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss3(clouds3);

    // Charger l'image
    sf::Texture clouds4;
    if (!clouds4.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss4(clouds4);


    // Charger l'image
    sf::Texture clouds6;
    if (!clouds6.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss6(clouds6);

    cloudss6.setPosition(200.f, 200.f);


    // Charger l'image
    sf::Texture clouds7;
    if (!clouds7.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss7(clouds7);

    sf::Color couleur = cloudss7.getColor();
    couleur.a = 128; // valeur alpha de 128 (50% de transparence)
    cloudss7.setColor(couleur);



    // Charger l'image
    sf::Texture clouds72;
    if (!clouds72.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss72(clouds72);
    cloudss72.setColor(couleur);

    // Charger l'image
    sf::Texture clouds73;
    if (!clouds73.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss73(clouds73);
    cloudss73.setColor(couleur);

    // Charger l'image
    sf::Texture clouds733;
    if (!clouds733.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss733(clouds733);
    cloudss733.setColor(couleur);



    // Charger l'image
    sf::Texture clouds8;
    if (!clouds8.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss8(clouds8);


    // Charger l'image
    sf::Texture clouds9;
    if (!clouds9.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss9(clouds9);

    // Charger l'image
    sf::Texture clouds10;
    if (!clouds10.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/12-cloud-png-image.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite cloudss10(clouds10);

    //--------------------------------------------GAME OVER----------------------------------------------------

    // Charger l'image
    sf::Texture textOV;
    if (!textOV.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/Game over text picture.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite textOVV(textOV);


    // Définir l'échelle de l'image
    textOVV.setScale(.005f, .005f); // Double la taille de l'image

    textOVV.setPosition(3000, -3000);


    //-----------------------------------------building---------------------------------------------------

        // Charger l'image
    sf::Texture building1;
    if (!building1.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/pngegg (1).png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite buildingg1(building1);
    buildingg1.setPosition(600, 500);

    // Charger l'image
    sf::Texture building2;
    if (!building2.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/pngegg (2).png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite buildingg2(building2);
    buildingg2.setPosition(300, 300);

    // Charger l'image
    sf::Texture building3;
    if (!building3.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/pngegg (2).png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite buildingg3(building3);
    buildingg3.setPosition(450, 300);


    // Charger l'image
    sf::Texture Montaine1;
    if (!Montaine1.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/Montaine2.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite Montainee1(Montaine1);
    Montainee1.setPosition(300, 550);
    Montainee1.setScale(1, 1);


    // Charger l'image
    sf::Texture Montaine2;
    if (!Montaine2.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/Montaine1.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite Montainee2(Montaine2);
    Montainee2.setPosition(-250, 500);

    // Charger l'image
    sf::Texture Montaine3;
    if (!Montaine3.loadFromFile("D:/Etude/Informatique/Dauriac/Programme C ++ empaquet/stock/Montaine3.png"))
    {
        return 1; // Erreur de chargement de l'image
    }

    // Créer le sprite (l'image affichée dans la fenêtre)
    sf::Sprite Montainee3(Montaine3);
    Montainee3.setPosition(600, 500);

    // Vitesse de l'oiseau
    float birdSpeed = 0;

    // Boucle principale du jeu
    while (window.isOpen())
    {
        // Gérer les événements
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
            {
                window.close();
            }
            else if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Space)
            {
                // L'oiseau saute quand la touche Espace est pressée
                birdSpeed = -10;
                birdSprite.setTexture(birdTexture);
                
            }

            else if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape)
            {
                window.close();

            }

            else if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::R)
            {
                backgroundSprite.setPosition(0, 0);
                birdSprite.setPosition(50, 400);
                pipeUpSprite.setPosition(600, -500);
                pipeDownSprite.setPosition(600, 600);
                textOVV.setScale(.005f, .005f);
                textOVV.setPosition(3000, -3000);
                pipeUpSprite.setScale(0.59, 1);
                pipeDownSprite.setScale(0.59, 1);
                birdSprite.setScale(.04, .04);
                window.display();

            }

        }
              // Vérifier si 1 seconde s'est écoulée
            if (clock.getElapsedTime().asSeconds() >= .005f)
            {
                // Alterner les sprites
                if (birdSprite.getTexture() == &birdTexture)
                {
                    birdSprite.setTexture(birdTexture2);
                }
                // Réinitialiser l'horloge
                clock.restart();
            }

        //---------------------------------------Les spawns des nuages, les trajectoires aléatoire et leurs vitesses---------------------------------------------------

        window.draw(cloudss);
        sf::Vector2f cloudPosition = cloudss.getPosition(); //Recup la position de la pokéball
        if (cloudPosition.x < -280) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss.move(-1.9, 0); //Bouge vers la gauche

        window.draw(cloudss2);
        sf::Vector2f cloudPosition2 = cloudss2.getPosition(); //Recup la position de la pokéball
        if (cloudPosition2.x < -480) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss2.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss2.move(-1.2, 0); //Bouge vers la gauche

        window.draw(cloudss3);
        sf::Vector2f cloudPosition3 = cloudss3.getPosition(); //Recup la position de la pokéball
        if (cloudPosition3.x < -1760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss3.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss3.move(-1.2, 0); //Bouge vers la gauche

        window.draw(cloudss4);
        sf::Vector2f cloudPosition4 = cloudss4.getPosition(); //Recup la position de la pokéball
        if (cloudPosition4.x < -1760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss4.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss4.move(-3.2, 0); //Bouge vers la gauche

        window.draw(cloudss6);
        sf::Vector2f cloudPosition6 = cloudss6.getPosition(); //Recup la position de la pokéball
        if (cloudPosition6.x < -1760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss6.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss6.move(-3.2, -2); //Bouge vers la gauche

        window.draw(cloudss7);
        sf::Vector2f cloudPosition7 = cloudss7.getPosition(); //Recup la position de la pokéball
        if (cloudPosition7.x < -760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss7.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss7.move(-.09, -.5); //Bouge vers la gauche

        window.draw(cloudss72);
        sf::Vector2f cloudPosition72 = cloudss7.getPosition(); //Recup la position de la pokéball
        if (cloudPosition72.x < -760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss72.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss72.move(-.01, -.5); //Bouge vers la gauche

        window.draw(cloudss733);
        sf::Vector2f cloudPosition723 = cloudss733.getPosition(); //Recup la position de la pokéball
        if (cloudPosition723.x < -760) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss733.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss733.move(-.01, -.5); //Bouge vers la gauche

        window.draw(cloudss8);
        sf::Vector2f cloudPosition8 = cloudss8.getPosition(); //Recup la position de la pokéball
        if (cloudPosition8.x < -3000) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss8.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss8.move(-1.2, -.4); //Bouge vers la gauche

        window.draw(cloudss9);
        sf::Vector2f cloudPosition9 = cloudss9.getPosition(); //Recup la position de la pokéball
        if (cloudPosition9.x < -3000) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 680) + 20; //prend une hauteur aléatoire
            cloudss9.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss9.move(-2.2, -.4); //Bouge vers la gauche

        window.draw(cloudss10);
        sf::Vector2f cloudPosition10 = cloudss9.getPosition(); //Recup la position de la pokéball
        if (cloudPosition10.x < -3000) //si c'est à gauche de l'écran en hors champs
        {
            int y = (rand() % 70) + 20; //prend une hauteur aléatoire
            cloudss10.setPosition(sf::Vector2f(1000, y)); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        cloudss10.move(-.001, 0); //Bouge vers la gauche


        //-------------------------------------------------------------Loop building------------------------------------------------------------


        buildingg1.move(-2, 0);
        buildingg2.move(-1.2, 0);
        buildingg3.move(-.9, 0);
        Montainee1.move(-.2, 0);
        Montainee2.move(-.6, 0);
        Montainee3.move(-.8, 0);


        window.draw(buildingg1);
        sf::Vector2f BuildingPosition1 = buildingg1.getPosition(); //Recup la position de la pokéball
        if (BuildingPosition1.x < -1000) //si c'est à gauche de l'écran en hors champs
        {
            buildingg1.setPosition(1000, 500); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        }
        buildingg1.move(-.01, 0); //Bouge vers la gauche

        //window.draw(buildingg2);
        //sf::Vector2f BuildingPosition2 = buildingg2.getPosition(); //Recup la position de la pokéball
        //if (BuildingPosition2.x < -1000) //si c'est à gauche de l'écran en hors champs
        //{
        //    buildingg2.setPosition(1000, 500); //Remet la pokéball à droite hors champs à la hauteur piochée au dessus
        //}
        //buildingg2.move(-.01, 0); //Bouge vers la gauche

        if (buildingg2.getPosition().x < -1500)
        {
            buildingg2.setPosition(600, 300);
        }

        if (buildingg3.getPosition().x < -1500)
        {
            buildingg3.setPosition(600, 300);
        }

        if (Montainee1.getPosition().x < -1000)
        {
            Montainee1.setPosition(600, 550);
        }

        if (Montainee2.getPosition().x < -1000)
        {
            Montainee2.setPosition(600, 500);
        }

        if (Montainee3.getPosition().x < -1000)
        {
            Montainee3.setPosition(600, 500);
        }

        // Vérifier si 1 seconde s'est écoulée
        if (clock.getElapsedTime().asSeconds() >= .005f)
        {
            birdSprite.setTexture(birdTexture2);
            // Réinitialiser l'horloge
            clock.restart();
        }


        // Mettre à jour la position de l'oiseau
        birdSpeed += 0.5;
        birdSprite.move(0, birdSpeed);

        // Mettre à jour la position des tuyaux
        pipeUpSprite.move(-7.1, 0);
        pipeDownSprite.move(-7.1, 0);

        // Recycler les tuyaux quand ils sortent de l'écran
        if (pipeUpSprite.getPosition().x < -100)
        {
            int y = (rand() % 800 + 100);
            pipeUpSprite.setPosition(sf::Vector2f(600, y-1090));
            pipeDownSprite.setPosition(sf::Vector2f(600, y));
        }

        // Dessiner les sprites
        window.clear();
        window.draw(backgroundSprite);
        window.draw(Montainee1);
        window.draw(Montainee3);
        window.draw(Montainee2);
        window.draw(buildingg3);
        window.draw(buildingg2);
        window.draw(buildingg1);
        window.draw(cloudss);
        window.draw(cloudss2);
        window.draw(cloudss3);
        window.draw(cloudss4);
        window.draw(cloudss6);
        ////window.draw(cloudss8);
        window.draw(cloudss9);
        window.draw(cloudss7);
        window.draw(cloudss72);
        window.draw(cloudss73);
        window.draw(cloudss733);
        window.draw(pipeUpSprite);
        window.draw(pipeDownSprite);
        window.draw(birdSprite);
        window.draw(textOVV);

        window.display();

        // Vérifier si l'oiseau touche un tuyau
        if (birdSprite.getGlobalBounds().intersects(pipeUpSprite.getGlobalBounds())
            || birdSprite.getGlobalBounds().intersects(pipeDownSprite.getGlobalBounds()))
        {
            
            birdSprite.setScale(.00005f, .000005);
            textOVV.setScale(.4f, .4f);
            textOVV.setPosition(6, 58);
            pipeUpSprite.move(0, 0);
            pipeDownSprite.move(0, 0);

        }

        // Attendre 1/60ème de seconde (60 FPS)
        sf::Time elapsedTime = clock.getElapsedTime();
        if (elapsedTime.asMilliseconds() < 16)
        {
            sf::sleep(sf::milliseconds(16) - elapsedTime);
        }
        clock.restart();
    }

    return 0;
}